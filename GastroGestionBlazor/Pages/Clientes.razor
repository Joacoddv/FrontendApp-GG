@page "/clientes"

@using DTO
@using DTO.Cliente
@using System.Text.Json
@inject ClienteService ClienteService
@inject IMapper Mapper

<h3>Clientes</h3>
<hr class="custom-line" />

<div class="form-row">
    <button class="btn btn-primary" @onclick="AgregarNuevoCliente"><i class="fas fa-plus"></i> Nuevo cliente</button>
</div>

<div class="search-container">
    <div class="form-group">
        <label for="campoBusqueda">Filtrar por:</label>
        <select id="campoBusqueda" @onchange="OnCampoBusquedaChanged" class="form-control">
            <option value="Nombre_Cliente">Nombre</option>
            <option value="Apellido_Cliente">Apellido</option>
            <option value="Numero_Cliente">Número de cliente</option>
            <option value="Nro_Doc_Cliente">Número de documento</option>
            <option value="Estado_Cliente">Estado</option>
        </select>
    </div>
    <div class="form-group">
        <label for="valorBusqueda">Valor:</label>
        @if (campoBusqueda == "Estado_Cliente")
        {
            <select id="valorBusqueda" @bind="valorBusqueda" class="form-control">
                <option value="Activo">Activo</option>
                <option value="Inactivo">Inactivo</option>
            </select>
        }
        else
        {
            <input id="valorBusqueda" @bind="valorBusqueda" class="form-control" />
        }
    </div>
    <div class="form-group">
        <button class="btn btn-primary" @onclick="BuscarClientes">Buscar</button>
        <button class="btn btn-secondary" @onclick="LimpiarFiltros">Limpiar filtros</button>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessageBusqueda))
{
    <p class="text-danger">@errorMessageBusqueda</p>
}

@if (isLoading)
{
    <p>Cargando...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Email</th>
                <th>Número cliente</th>
                <th>Nro doc</th>
                <th>Tipo doc</th>
                <th>Estado civil</th>
                <th>Fecha nacimiento</th>
                <th>Sexo</th>
                <th>Nacionalidad</th>
                <th>Fecha alta</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cliente in clientes)
            {
                <tr>

                    <td>@cliente.Nombre</td>
                    <td>@cliente.Apellido</td>
                    <td>@cliente.Email</td>
                    <td>@cliente.Numero_Cliente</td>
                    <td>@(cliente.Nro_Doc.HasValue ? cliente.Nro_Doc.ToString() : string.Empty)</td>
                    <td>@cliente.Tipo_Doc</td>
                    <td>@cliente.Estado_Civil</td>
                    <td>@cliente.Fecha_Nacimiento?.ToString("dd/MM/yyyy")</td>
                    <td>@cliente.Sexo</td>
                    <td>@cliente.Nacionalidad</td>
                    <td>@cliente.Fecha_Alta_Cliente.ToString("dd/MM/yyyy")</td>
                    <td>@(cliente.Estado ? "Activo" : "Inactivo")</td>
                    <td class="action-buttons">
                        <button class="btn btn-info" @onclick="() => VerDetalle(cliente)" title="Ver Detalle"><i class="fas fa-eye"></i></button>
                        <button class="btn btn-info" @onclick="() => EditarCliente(cliente)" title="Editar Cliente"><i class="fas fa-edit"></i></button>
                        <button class="btn btn-info" @onclick="() => EliminarCliente(cliente)" title="Eliminar Cliente"><i class="fas fa-trash"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (clienteSeleccionado != null && !isEditing)
    {
        <h3>Detalle del cliente</h3>
        <div class="detail-container">
            <div class="detail-item">
                <label>Número de cliente:</label>
                <input value="@clienteSeleccionado.Numero_Cliente" disabled />
            </div>
            <div class="detail-item">
                <label>Nombre:</label>
                <input value="@clienteSeleccionado.Nombre" disabled />
            </div>
            <div class="detail-item">
                <label>Apellido:</label>
                <input value="@clienteSeleccionado.Apellido" disabled />
            </div>
            <div class="detail-item">
                <label>Email:</label>
                <input value="@clienteSeleccionado.Email" disabled />
            </div>
            <div class="detail-item">
                <label>Tipo doc:</label>
                <input value="@clienteSeleccionado.Tipo_Doc" disabled />
            </div>
            <div class="detail-item">
                <label>Nro doc:</label>
                <input value="@clienteSeleccionado.Nro_Doc" disabled />
            </div>
            <div class="detail-item">
                <label>Fecha nacimiento:</label>
                <input value="@clienteSeleccionado.Fecha_Nacimiento?.ToString("dd/MM/yyyy")" disabled />
            </div>
            <div class="detail-item">
                <label>Estado civil:</label>
                <input value="@clienteSeleccionado.Estado_Civil" disabled />
            </div>
            <div class="detail-item">
                <label>Sexo:</label>
                <input value="@clienteSeleccionado.Sexo" disabled />
            </div>
            <div class="detail-item">
                <label>Nacionalidad:</label>
                <input value="@clienteSeleccionado.Nacionalidad" disabled />
            </div>
            <div class="detail-item">
                <label>Fecha alta:</label>
                <input value="@clienteSeleccionado.Fecha_Alta_Cliente.ToString("dd/MM/yyyy")" disabled />
            </div>
            <div class="detail-item">
                <label>Estado:</label>
                <input value="@(clienteSeleccionado.Estado ? "Activo" : "Inactivo")" disabled />
            </div>
        </div>
        <div class="footer-spacing"></div>
    }

    @if (isEditing)
    {
        <h3>@(clienteSeleccionado == null ? "Agregar cliente" : "Editar cliente")</h3>
        <div class="detail-container">
            <div class="detail-item">
                <label>Nombre:</label>
                <input @bind="clienteSeleccionado.Nombre" class="form-control" />
            </div>
            <div class="detail-item">
                <label>Apellido:</label>
                <input @bind="clienteSeleccionado.Apellido" class="form-control" />
            </div>
            <div class="detail-item">
                <label>Email:</label>
                <input @bind="clienteSeleccionado.Email" class="form-control" />
            </div>
            <div class="detail-item">
                <label>Tipo doc:</label>
                <input @bind="clienteSeleccionado.Tipo_Doc" class="form-control" />
            </div>
            <div class="detail-item">
                <label>Nro doc:</label>
                <input @bind="clienteSeleccionado.Nro_Doc" class="form-control" />
            </div>
            <div class="detail-item">
                <label>Fecha nacimiento:</label>
                <input @bind="clienteSeleccionado.Fecha_Nacimiento" type="date" class="form-control" />
            </div>
            <div class="detail-item">
                <label>Estado civil:</label>
                <input @bind="clienteSeleccionado.Estado_Civil" class="form-control" />
            </div>
            <div class="detail-item">
                <label>Sexo:</label>
                <input @bind="clienteSeleccionado.Sexo" class="form-control" />
            </div>
            <div class="detail-item">
                <label>Nacionalidad:</label>
                <input @bind="clienteSeleccionado.Nacionalidad" class="form-control" />
            </div>
            <div class="mt-3">
                <button class="btn btn-primary" @onclick="GuardarCliente">Guardar</button>
                <button class="btn btn-secondary" @onclick="CancelarEdicion">Cancelar</button>
            </div>
        </div>
        <div class="footer-spacing"></div>
    }
}

@code {
    private List<ClienteToListDTO> clientes;
    private ClienteToListDTO clienteSeleccionado;
    private ClienteCreacionDTO nuevoCliente;
    private string campoBusqueda = "Nombre_Cliente";
    private string valorBusqueda;
    private bool isLoading = true;
    private string errorMessage;
    private string errorMessageBusqueda;
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarClientes();
    }

    private async Task CargarClientes()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            clientes = await ClienteService.GetAllClientesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnCampoBusquedaChanged(ChangeEventArgs e)
    {
        campoBusqueda = e.Value.ToString();
    }

    private async Task BuscarClientes()
    {
        try
        {
            isLoading = true;
            errorMessageBusqueda = null;
            clientes = await ClienteService.BuscarClientesAsync(campoBusqueda, valorBusqueda);
        }
        catch (Exception ex)
        {
            errorMessageBusqueda = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LimpiarFiltros()
    {
        valorBusqueda = string.Empty;
        errorMessageBusqueda = string.Empty;
        clienteSeleccionado = null;
        isEditing = false;
        await CargarClientes();
    }

    private void VerDetalle(ClienteToListDTO cliente)
    {
        clienteSeleccionado = cliente;
        isEditing = false;
    }

    private void EditarCliente(ClienteToListDTO cliente)
    {
        clienteSeleccionado = cliente;
        isEditing = true;
    }

    private void AgregarNuevoCliente()
    {
        clienteSeleccionado = new ClienteToListDTO();
        isEditing = true;
    }

    private async Task GuardarCliente()
    {
        try
        {
            if (clienteSeleccionado.Id_Cliente == Guid.Empty)
            {
                // Crear nuevo cliente
                var clienteCreacionDTO = Mapper.Map<ClienteCreacionDTO>(clienteSeleccionado);
                await ClienteService.AgregarClienteAsync(clienteCreacionDTO);
            }
            else
            {
                // Editar cliente existente
                await ClienteService.EditarClienteAsync(Mapper.Map<ClienteEdicionDTO>(clienteSeleccionado));
            }
            await CargarClientes();
            isEditing = false;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void CancelarEdicion()
    {
        clienteSeleccionado = null;
        isEditing = false;
    }

    private async Task EliminarCliente(ClienteToListDTO cliente)
    {
        try
        {
            // Implementa la lógica para eliminar el cliente aquí
            // await ClienteService.EliminarClienteAsync(cliente.Id_Cliente);

            await ClienteService.EliminarClienteAsync(Mapper.Map < ClienteEdicionDTO >(cliente));
            await CargarClientes();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
